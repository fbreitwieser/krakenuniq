#!/usr/bin/env perl

# Original file Copyright 2013-2015, Derrick Wood <dwood@cs.jhu.edu>
# Portions (c) 2017, Florian Breitwieser <fbreitwieser@jhu.edu> as part of KrakenUniq
#
# This file is part of the Kraken taxonomic sequence classification system.
#
# Kraken is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Kraken is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kraken.  If not, see <http://www.gnu.org/licenses/>.

# Wrapper for Kraken's classifier

use strict;
use warnings;
use File::Basename;
use File::Path;
use Getopt::Long;
use POSIX qw/strftime/;
use Cwd;
use File::Path qw/make_path/;

my $PROG = basename $0;
my $KRAKEN_DIR = "#####=KRAKEN_DIR=#####";

# Test to see if the executables got moved, try to recover if we can
if (! -e "$KRAKEN_DIR/classify") {
  use Cwd 'abs_path';
  $KRAKEN_DIR = dirname abs_path($0);
}

require "$KRAKEN_DIR/krakenlib.pm";
$ENV{"KRAKEN_DIR"} = $KRAKEN_DIR;
$ENV{"PATH"} = "$KRAKEN_DIR:$ENV{PATH}";

my $CLASSIFY = "$KRAKEN_DIR/classify";
my $CLASSIFY_EXACT = "$KRAKEN_DIR/classifyExact";
my $CREATE_TAXDB = "$KRAKEN_DIR/build_taxdb";
my $READ_MERGER = "$KRAKEN_DIR/read_merger.pl";
my $GZIP_MAGIC = chr(hex "1f") . chr(hex "8b");
my $BZIP2_MAGIC = "BZ";

my $quick = 0;
my $min_hits = 1;
my $fasta_input = 0;
my $fastq_input = 0;
my @db_prefix;
my $threads;
my $preload = 0;
my $lock_memory = 0;
my $gunzip = 0;
my $bunzip2 = 0;
my $paired = 0;
my $check_names = 0;
my $only_classified_output = 0;
my @unclassified_outfiles;
my @classified_outfiles;
my @outfiles;
my @report_outfiles;
my @catdb_files;
my $print_sequence = 0;
my $uid_mapping = 0;
my $hll_precision = 12;
my $use_exact_counting = 0;

GetOptions(
  "help" => \&display_help,
  "version" => \&display_version,
  "db=s" => \@db_prefix,
  "threads=i" => \$threads,
  "fasta-input" => \$fasta_input,
  "fastq-input" => \$fastq_input,
  "lock-memory" => \$lock_memory,
  "quick" => \$quick,
  "min-hits=i" => \$min_hits,
  "unclassified-out=s" => \@unclassified_outfiles,
  "classified-out=s" => \@classified_outfiles,
  "o|output=s" => \@outfiles,
  "report-files=s" => \@report_outfiles,
  "print-sequence=s" => \$print_sequence,
  "preload" => \$preload,
  "paired" => \$paired,
  "hll-precision=i", \$hll_precision,
  "exact", \$use_exact_counting,
  "check-names" => \$check_names,
  "gzip-compressed" => \$gunzip,
  "bzip2-compressed" => \$bunzip2,
  "uid-mapping" => \$uid_mapping,
  "only-classified-output" => \$only_classified_output,
) or die $!;

if (! defined $threads) {
  $threads = $ENV{"KRAKEN_NUM_THREADS"} || 1;
}

if (! @ARGV && !$preload) {
  print STDERR "Need to specify input filenames!\n";
  usage();
}

if (!@report_outfiles && !$preload && ! @ARGV) {
  print STDERR "Need to specify report file(s) with --report-files! Set to 'off' to suppress report generation.
See --help for more details.\n";
  exit 1;
}


if (scalar(@db_prefix) == 0) {
  print STDERR "Need to specify a database with --db!
See --help for more details.\n";
  exit 1;
}


my @all_db_prefix = @db_prefix;
@db_prefix = ();
for (@all_db_prefix) {
    if (! -d $_) { push @catdb_files, $_}
    else { push @db_prefix, $_}
}
eval { @db_prefix = map { krakenlib::find_db($_) } @db_prefix };

if ($@) {
  die "$PROG: $@";
}

my $database = $uid_mapping? "uid_database.kdb" : "database.kdb";
my @kdb_files = map { "$_/$database" } @db_prefix;

my @idx_files = map { "$_/database.idx" } @db_prefix;

foreach my $file (@kdb_files,@idx_files) {
  die "$PROG: $file does not exist!\n" if (! -e $file);
}

if (scalar(@db_prefix) > 1) {
  my $taxdb1_size = (stat $db_prefix[0]."/taxDB")[7];
  for (my $i = 1; $i < scalar(@db_prefix); ++$i) {
    my $taxdb2_size = (stat $db_prefix[$i]."/taxDB")[7];
    if ($taxdb1_size !=  $taxdb2_size) {
      print STDERR "You need identical taxonomies for hierachical mapping!\n";
      print STDERR "$db_prefix[0]/taxDB differs from $db_prefix[$i]/taxDB.\n";
      exit 1;
    }
  }
}

if ($min_hits > 1 && ! $quick) {
  die "$PROG: --min_hits requires --quick to be specified\n";
}


if ($paired && scalar @ARGV % 2 ) {
    die "$PROG: --paired requires 2x filenames\n";
}

my $compressed = $gunzip || $bunzip2;
if ($gunzip && $bunzip2) {
  die "$PROG: can't use both gzip and bzip2 compression flags\n";
}
if ($fasta_input && $fastq_input) {
  die "$PROG: can't use both FASTA and FASTQ input flags\n";
}

my $auto_detect = 1;
if ($fasta_input || $fastq_input || $compressed) {
  $auto_detect = 0;
}
if (!defined $ARGV[0] || ! -f $ARGV[0]) {
  $auto_detect = 0;
}
if ($auto_detect) {
  auto_detect_file_format();
}

foreach my $report_file (@report_outfiles) {
    if (defined $report_file && !-d dirname($report_file)) {
        print STDERR "Creating directory for $report_file.\n";
        make_path(dirname($report_file));
    }

    if (defined $report_file && -s $report_file) {
        print STDERR "Warning: Overwriting $report_file.\n";
    }
}

my $taxdb;
if (scalar(@db_prefix) > 0) {
    $taxdb = $db_prefix[0]."/taxDB";
} else {
    my ($filename, $dirs, $suffix) = fileparse($catdb_files[0]);
    $taxdb = $dirs."/taxDB";
}

my $now = time();
my $date = strftime('%Y-%m-%dT%H:%M:%SZ', gmtime($now));
my $wd = getcwd;
my $db_size = -s $kdb_files[0];

# set flags for classifier
my @flags;
push @flags, map { ("-d", $_) } @kdb_files;
push @flags, map { ("-i", $_) } @idx_files;
push @flags, "-t", $threads if $threads > 1;
push @flags, "-q" if $quick;
push @flags, "-l" if $lock_memory;
push @flags, "-m", $min_hits if $min_hits > 1;
push @flags, "-f" if $fastq_input && ! $paired;  # merger always outputs FASTA
push @flags, "-c", if $only_classified_output;
push @flags, "-M" if $preload;
push @flags, "-a", $taxdb;
push @flags, "-s" if $print_sequence;
push @flags, "-p", $hll_precision;
if ($uid_mapping) {
  my $uid_mapping_file = "$db_prefix[0]/uid_to_taxid.map";
  if (!-f $uid_mapping_file) {
    print STDERR "Missing required file $uid_mapping_file for UID mapping.\n";
    exit(1);
  }
  push @flags, "-I", $uid_mapping_file;
} else {

}
if (@outfiles) {
    foreach my $outfile (@outfiles) {
        push @flags, "-o", $outfile;
    }
}
if (@classified_outfiles) {
    foreach my $outfile (@classified_outfiles) {
        push @flags, "-C", $outfile;
    }
}
if (@unclassified_outfiles) {
    foreach my $outfile (@unclassified_outfiles) {
        push @flags, "-U", $outfile;
    }
}
if (@report_outfiles) {
    foreach my $outfile (@report_outfiles) {
        push @flags, "-r", $outfile;
    }
}


if (! -f $db_prefix[0]."/taxDB") {
  print STDERR "Taxonomy database not at ".$db_prefix[0]."/taxDB - creating it ...";
  die "$db_prefix[0]/taxonomy/nodes.dmp does not exist!" unless  -f $db_prefix[0]."/taxonomy/nodes.dmp";
  die "$db_prefix[0]/taxonomy/names.dmp does not exist!" unless  -f $db_prefix[0]."/taxonomy/names.dmp";

  my $cmd = "$CREATE_TAXDB $db_prefix[0]/taxonomy/names.dmp $db_prefix[0]/taxonomy/nodes.dmp > $db_prefix[0]/taxDB";
  print STDERR "$cmd\n";
  system $cmd;
}


# handle piping for decompression/merging
my @pipe_argvv;
foreach (my $i = 0; $i < @ARGV; $i++) {
    my @pipe_argv;
    my $use_pipe = 0;
    if ($paired) {
        $use_pipe = 1;

        my @merge_flags;
        push @merge_flags, "--fa" if $fasta_input;
        push @merge_flags, "--fq" if $fastq_input;
        push @merge_flags, "--gz" if $gunzip;
        push @merge_flags, "--bz2" if $bunzip2;
        push @merge_flags, "--check-names" if $check_names;
        @pipe_argv = ("read_merger.pl", @merge_flags, @ARGV[$i, $i+1]);
        $i++;
    }
    elsif ($compressed) {
        $use_pipe = 1;

        if ($gunzip) {
            @pipe_argv = ("gzip", "-dc", $ARGV[$i]);
        }
        elsif ($bunzip2) {
            @pipe_argv = ("bzip2", "-dc", $ARGV[$i]);
        }
        else {
            die "$PROG: unrecognized compression program! This is a Kraken bug.\n";
        }
    } else {
        @pipe_argv = $ARGV[$i];
    }
    if ($use_pipe) {
        @pipe_argv = ( "<(", @pipe_argv, ")" );
    }
    push @pipe_argvv, @pipe_argv;
}

my $cmd = $use_exact_counting? $CLASSIFY_EXACT : $CLASSIFY;
print STDERR "$cmd @flags @ARGV\n";
foreach my $report_file (@report_outfiles) {
    my $mycmd = qx/ps -o args= $$/;
    open(my $RF, ">", $report_file) or die "Could not open report file for writing";
    print $RF "# KrakenUniq v#####=VERSION=##### DATE:$date DB:@db_prefix DB_SIZE:$db_size WD:$wd\n# CL:$mycmd\n";
    close($RF)
}

exec join(" ", ("exec /bin/bash -c \"exec", $cmd, @flags, @pipe_argvv, "\""));
die "$PROG: exec error: $!\n";

sub usage {
  my $exit_code = @_ ? shift : 64;
  my $default_db = "none";
  eval { $default_db = '"' . krakenlib::find_db() . '"'; };
  my $def_thread_ct = exists $ENV{"KRAKEN_NUM_THREADS"} ? (0 + $ENV{"KRAKEN_NUM_THREADS"}) : 1;
  print STDERR <<EOF;
Usage: $PROG --report-file FILENAME [options] <filename(s)>

Options:
  --db NAME               Name for Kraken DB (default: $default_db)
  --threads NUM           Number of threads (default: $def_thread_ct)
  --fasta-input           Input is FASTA format
  --fastq-input           Input is FASTQ format
  --gzip-compressed       Input is gzip compressed
  --bzip2-compressed      Input is bzip2 compressed
  --hll-precision INT     Precision for HyperLogLog k-mer cardinality estimation, between 10 and 18 (default: $hll_precision)
  --exact                 Compute exact cardinality instead of estimate (slower, requires memory proportional to cardinality!)
  --quick                 Quick operation (use first hit or hits)
  --min-hits NUM          In quick op., number of hits req'd for classification
                          NOTE: this is ignored if --quick is not specified
  --unclassified-out FILENAME
                          Print unclassified sequences to filename
  --classified-out FILENAME
                          Print classified sequences to filename
  --output FILENAME       Print output to filename (default: stdout); "off" will
                          suppress normal output
  --only-classified-output
                          Print no Kraken output for unclassified sequences
  --preload               Loads DB into memory before classification
  --paired                The two filenames provided are paired-end reads
  --check-names           Ensure each pair of reads have names that agree
                          with each other; ignored if --paired is not specified
  --help                  Print this message
  --version               Print version information

Experimental:
  --uid-mapping           Map using UID database

If none of the *-input or *-compressed flags are specified, and the
file is a regular file, automatic format detection is attempted.
EOF
  exit $exit_code;
}

sub display_help {
  usage(0);
}

sub display_version {
  print "KrakenUniq version #####=VERSION=#####\n";
  print "Copyright 2017-2018, Florian Breitwieser (fbreitwieser\@jhu.edu)\n";
  print "Copyright 2013-2017, Derrick Wood (dwood\@cs.jhu.edu) for Kraken\n";
  exit 0;
}

sub auto_detect_file_format {
  my $magic;
  my $filename = $ARGV[0];

  # read 2-byte magic number to determine type of compression (if any)
  open FILE, "<", $filename;
  read FILE, $magic, 2;
  close FILE;
  if ($magic eq $GZIP_MAGIC) {
    $compressed = 1;
    $gunzip = 1;
  }
  elsif ($magic eq $BZIP2_MAGIC) {
    $compressed = 1;
    $bunzip2 = 1;
  }
  else {
    # if no compression, just look at first char
    chop $magic;
  }

  # uncompress to stream and read first char
  if ($gunzip) {
    open FILE, "-|", "gzip", "-dc", $filename
      or die "$PROG: can't determine format of $filename (gzip error): $!\n";
    read FILE, $magic, 1;
    close FILE;
  }
  elsif ($bunzip2) {
    open FILE, "-|", "bzip2", "-dc", $ARGV[0]
      or die "$PROG: can't determine format of $filename (bzip2 error): $!\n";
    read FILE, $magic, 1;
    close FILE;
  }

  if ($magic eq ">") {
    $fasta_input = 1;
  }
  elsif ($magic eq "@") {
    $fastq_input = 1;
  }
  else {
    die "$PROG: can't determine what format $filename is!\n";
  }
}
